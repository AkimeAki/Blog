---
import Footer from "@/components/molecules/Footer.astro";
import Base from "@/layouts/Base.astro";
import { formatDate, getEmojiOfWeek } from "@/lib/format-date";
import { cx } from "@/lib/merge-panda";
import type { Blog } from "@/lib/microcms";
import { css } from "@/styled-system/css";
import type { MicroCMSContentId, MicroCMSDate } from "microcms-js-sdk";

interface Props {
	posts: (Blog & MicroCMSContentId & MicroCMSDate)[];
}

const { posts } = Astro.props;
---

<Base ogType="blog">
	<slot name="header" />

	<div
		class={css`
			position: fixed;
			top: 10vh;
			right: 5vw;
			border: 4px solid #ffffff;
			user-select: none;
			pointer-events: none;
			z-index: 2;

			@media (max-width: 800px) {
				opacity: 0.5;
			}
		`}
	>
		<div
			class={css`
				width: 100%;
				height: 35px;
				background-color: #ffffff;
				border-bottom: 4px solid #ffffff;
			`}
		>
			<div
				class={css`
					display: flex;
					height: 100%;
					gap: 10px;
					align-items: center;
					margin-right: 10px;
					justify-content: flex-end;
				`}
			>
				<div
					class={css`
						display: flex;
						align-items: center;
						justify-content: center;
						position: relative;
						width: 27px;
						height: 27px;
						border-radius: 50%;

						&:before {
							display: block;
							content: "";
							width: 13px;
							height: 13px;
							border-bottom-color: #91797d;
							border-bottom-style: solid;
							border-bottom-width: 2px;
						}
					`}
				>
				</div>
				<div
					class={css`
						display: flex;
						align-items: center;
						justify-content: center;
						position: relative;
						width: 27px;
						height: 27px;
						border-radius: 50%;

						&:before {
							display: block;
							content: "";
							width: 11px;
							height: 11px;
							border: 2px solid #91797d;
						}
					`}
				>
				</div>
				<div
					class={css`
						position: relative;
						width: 27px;
						height: 27px;
						border-radius: 50%;

						&:before {
							top: 12px;
							transform: rotate(45deg);
							position: absolute;
							left: 5px;
							display: block;
							content: "";
							width: 17px;
							height: 3px;
							background-color: #91797d;
						}

						&:after {
							bottom: 12px;
							transform: rotate(-45deg);
							position: absolute;
							left: 5px;
							display: block;
							content: "";
							width: 17px;
							height: 3px;
							background-color: #91797d;
						}
					`}
				>
				</div>
			</div>
		</div>
		<div
			class={css`
				position: relative;
				width: 350px;
				height: 100%;
				aspect-ratio: 16/9;
				overflow: hidden;

				&:before {
					content: "";
					position: absolute;
					top: 0;
					left: 0;
					width: 100%;
					height: 100%;
					background: repeating-linear-gradient(0deg, transparent 0%, rgba(255, 255, 255, 0.2) 5%);
					filter: contrast(2);
					opacity: 0.5;
					animation: grain 0.2s infinite steps(2);
				}

				@media (max-width: 800px) {
					width: 250px;
				}
			`}
		>
			{
				posts.map((post) => {
					return (
						<>
							{post.thumbnail !== undefined && (
								<img
									class={cx(
										css`
											width: 100%;
											height: 100%;
											vertical-align: bottom;
											object-fit: cover;
											position: absolute;
											top: 0;
											left: 0;
											opacity: 0;
											animation-duration: 50ms;
											animation-fill-mode: forwards;
											animation-iteration-count: 5;
											animation-timing-function: linear;
										`,
										"post-thumbnail"
									)}
									data-id={post.id}
									src={`${post.thumbnail.url}?fm=webp&w=500`}
									alt={post.thumbnail.alt ?? post.title}
									loading={"lazy"}
								/>
							)}
						</>
					);
				})
			}
		</div>
	</div>

	<div
		class={css`
			position: fixed;
			top: 0;
			left: 0;
			width: 100%;
			height: 100vh;
			z-index: 1;
			user-select: none;
			pointer-events: none;
			background-image: radial-gradient(#ffffff, #bebebe);
			overflow: hidden;
			mask-image: linear-gradient(to bottom, black 0px, transparent 200px, transparent 100%);

			@media (prefers-color-scheme: dark) {
				background-image: radial-gradient(#555, #000);
				mask-image: linear-gradient(to bottom, black 0px, transparent 100px, transparent 100%);
			}
		`}
	>
	</div>

	<div
		class={css`
			padding: 50vh 20px 10vh;
		`}
	>
		<div
			class={css`
				display: flex;
				flex-direction: column;
				align-items: flex-start;
				gap: 15px;
			`}
		>
			{
				posts.map((post) => {
					const formattedPublishedAt = formatDate(post.publishedAt ?? post.createdAt);

					return (
						<div
							class={cx(
								css`
									position: relative;
									transition-duration: 200ms;
									border: 2px solid transparent;
									padding-left: 15px;
								`,
								"post-card"
							)}
							data-id={post.id}
							data-tags={JSON.stringify(post.tags.map((tag) => tag.id))}
						>
							<a href={`/posts/${post.id}`} aria-label={`記事『${post.title}』を読む`}>
								<h2
									data-emoji={getEmojiOfWeek(formattedPublishedAt.day)}
									class={cx(
										css`
											position: relative;
											font-size: 18px;
											font-weight: bold;
											padding: 3px 0;
											margin-bottom: 3px;
											color: #464646;

											@media (prefers-color-scheme: dark) {
												color: white;
											}

											&:hover {
												@media (hover: hover) {
													background-color: #edf8af;
													color: #353d06;

													&:before {
														animation-name: signal;
													}

													&:after {
														animation-name: signal;
													}
												}
											}

											&:before {
												position: absolute;
												top: 0;
												left: -30px;
												content: attr(data-emoji);
												padding: 3px 0;
												color: #818181;
												filter: brightness(110%) blur(3px);
												animation-duration: 50ms;
												animation-fill-mode: forwards;
												animation-iteration-count: 3;
												animation-timing-function: linear;
											}

											&:after {
												position: absolute;
												top: 0;
												left: -30px;
												content: attr(data-emoji);
												padding: 3px 0;
												color: #818181;
												animation-duration: 50ms;
												animation-fill-mode: forwards;
												animation-iteration-count: 5;
												animation-timing-function: linear;
											}
										`,
										"post-title"
									)}
								>
									{post.title}
								</h2>
							</a>
							{post.tags.length !== 0 && (
								<div
									class={css`
										display: flex;
										gap: 7px;
										flex-wrap: wrap;
										align-items: center;
										margin-bottom: 8px;
									`}
								>
									{post.tags.map((tag) => {
										const size = 20;

										return (
											<img
												data-tag-id={tag.id}
												class={cx(
													"post-tag-icon",
													css`
														background-color: #eeeeee;
														border-radius: 9999px;
														animation-duration: 1s;
														animation-iteration-count: infinite;
														animation-timing-function: steps(10);

														&:hover {
															animation-name: tagRotate;
														}
													`
												)}
												src={tag.image !== undefined ? `${tag.image.url}?fm=webp&w=${50}` : ""}
												width={size}
												height={size}
												alt={tag.name}
												loading="lazy"
											/>
										);
									})}
								</div>
							)}
							<time
								class={css`
									font-size: 13px;
									display: block;

									&:before {
										content: "# ";
										color: #818181;
									}
								`}
								datetime={post.publishedAt ?? post.createdAt}
							>
								{`${formattedPublishedAt.year}/${formattedPublishedAt.month}/${formattedPublishedAt.date}`}
							</time>
							<div
								class={css`
									display: flex;
									align-items: center;
									margin-top: 6px;
								`}
							>
								{post.category !== undefined && (
									<a
										href={`/categories/${post.category.id}`}
										class={css`
											--_foreground-threshold: 0.7;
											--_foreground: oklch(
												from var(--_background)
													round(up, var(--_foreground-threshold) / l - 1, 1) 0 h
											);

											display: block;
											border-style: solid;
											border-color: transparent;
											border-width: 1px;

											font-size: 12px;

											&:hover {
												color: var(--_foreground);
												background-color: var(--_background);

												&:before {
													color: var(--_foreground);
												}
											}

											&:before {
												content: "# ";
												color: var(--_background);
											}
										`}
										style={{ "--_background": post.category.color }}
									>
										{post.category.name}
									</a>
								)}
							</div>
						</div>
					);
				})
			}
		</div>

		<Footer />
	</div>
</Base>

<style>
	@keyframes tagRotate {
		0% {
			rotate: y 0deg;
		}
		100% {
			rotate: y 360deg;
		}
	}

	@keyframes signal {
		0% {
			opacity: 0;
		}
		100% {
			opacity: 1;
		}
	}

	@keyframes grain {
		0% {
			transform: translate(0, 0);
		}
		100% {
			transform: translate(-10px, -10px);
		}
	}
</style>

<style lang="scss" is:global>
	body,
	html {
		-ms-overflow-style: none;
		scrollbar-width: none;
		&::-webkit-scrollbar {
			display: none;
		}
	}

	.flow-tag-wrapper {
		position: absolute;
		bottom: 0;
		display: block;
		width: 50px;
		height: 50px;
		border-radius: 100%;
		box-shadow: 0px 0px 15px 0px rgba(255, 255, 255, 0.6) inset;
		-webkit-box-shadow: 0px 0px 15px 0px rgba(255, 255, 255, 0.6) inset;
		animation-name: bubbleTag;
		animation-duration: 3000ms;
		animation-iteration-count: 1;
		animation-timing-function: ease-out;
		opacity: 0;
		user-select: none;
		pointer-events: none;
		background-color: #90e5ff57;
		z-index: calc(infinity);

		&:after {
			content: "";
			display: block;
			width: 20%;
			height: 20%;
			border-radius: 100%;
			background: rgba(255, 255, 255, 0.8);
			position: absolute;
			right: 15%;
			top: 15%;
			filter: blur(2px);
			transform: rotateZ(45deg) scaleY(0.8);
		}

		@keyframes bubbleTag {
			0% {
				opacity: 0;
				transform: translateX(-25px) translateY(0);
			}
			20% {
				opacity: 1;
			}
			50% {
				opacity: 1;
			}
			100% {
				opacity: 0;
				transform: translateX(-25px) translateY(-500px);
			}
		}

		.flow-tag {
			position: absolute;
			width: 70%;
			border-radius: 9999px;
			aspect-ratio: 1/1;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			animation-duration: 1s;
			animation-iteration-count: infinite;
			animation-timing-function: steps(10);
			animation-name: tagRotate;
			transform-origin: left;
		}
	}
</style>

<script>
	const createBubbleTag = (postCard: HTMLDivElement) => {
		const tags: string[] = JSON.parse(postCard.dataset.tags ?? "[]");

		tags.forEach((tagId) => {
			const delay = Math.random() * 2001;
			const x = Math.random() * postCard.clientWidth + 1 + "px";

			setTimeout(() => {
				const wrap = document.createElement("div");
				wrap.classList.add("flow-tag-wrapper");

				const icon = document.createElement("img");
				const postTagIconElement = document.querySelector<HTMLImageElement>(
					`.post-tag-icon[data-tag-id="${tagId}"]`
				);

				if (postTagIconElement !== null) {
					icon.src = postTagIconElement.src;
					icon.classList.add("flow-tag");
					icon.dataset.tag = tagId;
					wrap.style.left = x;
					postCard.appendChild(wrap);
					wrap.appendChild(icon);
					setTimeout(() => {
						wrap.remove();
					}, 3001);
				}
			}, delay);
		});
	};

	const postCards = document.querySelectorAll<HTMLDivElement>(".post-card");
	postCards.forEach((postCard) => {
		const postTitle = postCard.querySelector<HTMLHeadingElement>(".post-title");
		if (postTitle !== null) {
			postTitle.addEventListener("mouseover", () => {
				if (document.body.dataset.touch === "true") {
					return;
				}

				createBubbleTag(postCard);
			});

			postTitle.addEventListener(
				"touchstart",
				() => {
					if (document.body.dataset.touch === "false") {
						return;
					}

					createBubbleTag(postCard);
				},
				false
			);
		}
	});
</script>

<script>
	const postCardList = document.querySelectorAll<HTMLDivElement>(".post-card");
	for (const postCard of postCardList) {
		const title = postCard.querySelector<HTMLHeadingElement>(".post-title");
		if (title !== null) {
			title.addEventListener("mouseover", () => {
				const thumbnailList = document.querySelectorAll<HTMLImageElement>(".post-thumbnail");
				for (const thumbnail of thumbnailList) {
					if (thumbnail.dataset.id === postCard.dataset.id) {
						thumbnail.style.animationName = "signal";
					}
				}
			});

			title.addEventListener("touchstart", () => {
				const thumbnailList = document.querySelectorAll<HTMLImageElement>(".post-thumbnail");
				for (const thumbnail of thumbnailList) {
					if (thumbnail.dataset.id === postCard.dataset.id) {
						thumbnail.style.animationName = "signal";

						setTimeout(() => {
							thumbnail.style.animationName = "";
						}, 1000);
					}
				}
			});

			title.addEventListener("mouseleave", () => {
				const thumbnailList = document.querySelectorAll<HTMLImageElement>(".post-thumbnail");
				for (const thumbnail of thumbnailList) {
					if (thumbnail.dataset.id === postCard.dataset.id) {
						setTimeout(() => {
							thumbnail.style.animationName = "";
						}, 1000);
					}
				}
			});
		}
	}
</script>
