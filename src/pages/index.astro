---
import Layout from "@/layouts/Layout.astro";
import { formatDate } from "@/lib/format-date";
import { getListContents } from "@/lib/microcms";
import type { Blog } from "@/lib/microcms";

const posts = await getListContents<Blog>("blogs", { fields: ["id", "title", "tags", "publishedAt", "createdAt"] });
---

<Layout>
	<div class="post-list">
		{
			posts.contents.map((post) => (
				<div class="post-card">
					<time class="post-date" datetime={post.createdAt}>
						{formatDate(post.createdAt)}
					</time>
					<div>
						<h2 class="post-title">{post.title}</h2>
						<a class="post-link" href={`/${post.id}`} />
					</div>
					<div class="post-tags">
						{post.tags.map((tag) => (
							<div class="post-tag">
								<img
									class="post-tag-icon"
									src={`${
										tag.icon?.url ??
										"https://images.microcms-assets.io/assets/037528aa59e842fb8f9d8b5a23a3726c/0bac6ea3c7414ee9bd7b5476b380e87f/Tag.png"
									}?fm=webp&w=50`}
								/>
								<span class="post-tag-name">{tag.name}</span>
							</div>
						))}
					</div>
					<div class="post-tag-icons">
						{post.tags.map((tag) => (
							<img
								class="post-tag-icon"
								src={`${
									tag.icon?.url ??
									"https://images.microcms-assets.io/assets/037528aa59e842fb8f9d8b5a23a3726c/0bac6ea3c7414ee9bd7b5476b380e87f/Tag.png"
								}?fm=webp&w=50`}
							/>
						))}
					</div>
				</div>
			))
		}
	</div>
</Layout>

<style lang="scss">
	.post-list {
		display: grid;
		grid-template-columns: 1fr 1fr 1fr 1fr;
		gap: 20px;
		padding: 30px;
		width: 100%;
		max-width: 1200px;
		margin: 0 auto;

		@media (max-width: 900px) {
			grid-template-columns: 1fr 1fr 1fr;
		}

		@media (max-width: 700px) {
			grid-template-columns: 1fr 1fr;
		}

		@media (max-width: 600px) {
			grid-template-columns: 1fr;
			padding: 5px;
		}

		.post-card {
			display: flex;
			flex-direction: column;
			justify-content: space-between;
			position: relative;
			background-color: white;
			padding: 40px 10px 10px;
			box-shadow: 0 0 3px #cccccc;
			transition-duration: 200ms;

			.post-date {
				position: absolute;
				top: 0;
				left: 0;
				font-size: 15px;
				background-color: #a3a3a3;
				color: white;
				padding: 2px 5px;
			}

			.post-title {
				font-size: 15px;
			}

			.post-tag-icons {
				position: absolute;
				top: 50%;
				left: 50%;
				transform: translate(-50%, -50%);
				user-select: none;
				pointer-events: none;
				width: 50px;
				height: 50px;
				opacity: 0;
				z-index: 1;
				transition-duration: 500ms;
				transition-property: opacity;

				.post-tag-icon {
					position: absolute;
					top: 50%;
					left: 50%;
					width: 100%;
					height: 100%;
					filter: drop-shadow(0 0 3px #424242);
					transform: translate(-50%, -50%);
					transition-duration: 500ms;
					transition-property: top, left;
					transition-timing-function: cubic-bezier(0.18, 0.89, 0.32, 1.28);
				}
			}

			.post-tags {
				display: flex;
				gap: 5px;
				flex-wrap: wrap;
				align-items: center;
				padding-top: 10px;

				.post-tag {
					display: flex;
					gap: 5px;
					flex-wrap: wrap;
					align-items: center;

					.post-tag-icon {
						width: 15px;
					}

					.post-tag-name {
						font-size: 10px;
					}
				}
			}

			&:hover {
				.post-tag-icons[data-is-touch-device="false"] {
					opacity: 1;
				}
			}
		}

		.post-link {
			display: block;
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
		}
	}
</style>

<script>
	const setSize = (element: HTMLElement): number => {
		return element.clientWidth < element.clientHeight ? element.clientHeight : element.clientWidth;
	};

	const viewTagIcon = () => {
		const cards = document.querySelectorAll<HTMLElement>(".post-card");
		cards.forEach((card) => {
			const tags = card.querySelectorAll<HTMLImageElement>(".post-tag-icons > .post-tag-icon");
			let size = setSize(card);
			window.addEventListener(
				"resize",
				() => {
					size = setSize(card);
				},
				false
			);

			const isTouchDevice =
				"ontouchstart" in window ||
				navigator.maxTouchPoints > 0 ||
				window.matchMedia("(pointer:coarse)").matches;
			const postTagIcons = card.querySelector<HTMLElement>(".post-tag-icons");
			if (postTagIcons !== null) {
				postTagIcons.dataset.isTouchDevice = String(isTouchDevice);
			}
			const randomRadList = [45, 135, 225, 315];
			const randomRad = randomRadList[Math.floor(Math.random() * randomRadList.length)] ?? 45;
			card.addEventListener("mouseover", () => {
				tags.forEach((tag, index) => {
					const degree = (360 / tags.length) * (index + 1) + randomRad;
					const rad = degree * (1 / 180) * Math.PI;
					const x = Math.cos(rad) * (size / 2 + tag.clientWidth / 2);
					const y = Math.sin(rad) * (size / 2 + tag.clientWidth / 2);
					tag.style.top = `calc(50% + ${y}px)`;
					tag.style.left = `calc(50% + ${x}px)`;
				});
			});

			card.addEventListener("mouseleave", () => {
				tags.forEach((tag) => {
					tag.style.top = "";
					tag.style.left = "";
				});
			});
		});
	};

	viewTagIcon();

	document.addEventListener("astro:after-swap", viewTagIcon);
</script>
