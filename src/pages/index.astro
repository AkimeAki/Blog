---
import Layout from "@/layouts/Layout.astro";
import { formatDate } from "@/lib/format-date";
import { getListContents } from "@/lib/microcms";
import type { Blog } from "@/lib/microcms";

const posts = await getListContents<Blog>("blogs", {
	fields: ["id", "title", "tags", "publishedAt", "createdAt", "thumbnail"]
});

const postIcons: { id: string; urls: string[] }[] = [];
posts.contents.forEach((post) => {
	const urls: string[] = [];

	post.tags.forEach((tag) => {
		if (tag.icon !== undefined) {
			urls.push(tag.icon.url);
		}
	});

	postIcons.push({
		id: post.id,
		urls
	});
});
---

<Layout ogType="blog">
	<div class="post-list">
		{
			posts.contents.map((post) => (
				<div class="post-card">
					<time class="post-date" datetime={post.publishedAt ?? post.createdAt}>
						{formatDate(post.publishedAt ?? post.createdAt)}
					</time>
					<div>
						{post.thumbnail !== undefined && <img src={`${post.thumbnail.url}?fm=webp&w=250`} />}
						<h2 class="post-title">{post.title}</h2>
					</div>
					<div class="post-tags">
						{post.tags.map((tag) => {
							const size = 15;

							return (
								<div class="post-tag">
									<img
										class="post-tag-icon"
										src={`${
											tag.icon?.url ??
											"https://images.microcms-assets.io/assets/037528aa59e842fb8f9d8b5a23a3726c/0bac6ea3c7414ee9bd7b5476b380e87f/Tag.png"
										}?fm=webp&w=${size + 10}`}
										width={size}
										height={size}
										alt={`${tag.name}のアイコン`}
									/>
									<span class="post-tag-name">{tag.name}</span>
								</div>
							);
						})}
					</div>
					<a
						class="post-link"
						href={`/${post.id}`}
						data-id={post.id}
						aria-label={`記事『${post.title}』を読む`}
					/>
				</div>
			))
		}
	</div>
</Layout>

<style lang="scss">
	.post-list {
		display: grid;
		grid-template-columns: 1fr 1fr 1fr 1fr;
		gap: 20px;
		padding: 30px;
		width: 100%;
		max-width: 1200px;
		margin: 0 auto;

		@media (max-width: 900px) {
			grid-template-columns: 1fr 1fr 1fr;
		}

		@media (max-width: 700px) {
			grid-template-columns: 1fr 1fr;
		}

		@media (max-width: 600px) {
			grid-template-columns: 1fr;
			padding: 5px;
		}

		.post-card {
			display: flex;
			flex-direction: column;
			justify-content: space-between;
			position: relative;
			background-color: white;
			padding: 40px 10px 10px;
			box-shadow: 0 0 3px #cccccc;
			transition-duration: 200ms;

			.post-date {
				position: absolute;
				top: 0;
				left: 0;
				font-size: 15px;
				background-color: #a3a3a3;
				color: white;
				padding: 2px 5px;
			}

			.post-title {
				font-size: 15px;
			}

			.post-tags {
				display: flex;
				gap: 5px;
				flex-wrap: wrap;
				align-items: center;
				padding-top: 30px;

				.post-tag {
					display: flex;
					gap: 5px;
					flex-wrap: wrap;
					align-items: center;

					.post-tag-name {
						font-size: 10px;
					}
				}
			}

			&:hover {
				.post-tag-icons[data-is-touch-device="false"] {
					opacity: 1;
				}
			}

			.post-link {
				display: block;
				position: absolute;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;

				:global(.flow-post-icon) {
					position: absolute;
					width: 40px;
					aspect-ratio: 1/1;
					top: 90%;
					animation-name: fadeIn;
					animation-duration: 3000ms;
					animation-iteration-count: 1;
					animation-timing-function: ease-out;
					opacity: 0;
					user-select: none;
					pointer-events: none;

					@keyframes fadeIn {
						50% {
							transform: translateX(50%);
							opacity: 1;
						}

						100% {
							opacity: 0;
							top: -50%;
							transform: translateX(40%);
						}
					}
				}
			}
		}
	}
</style>

<script define:vars={{ postIcons }}>
	const postLinks = document.querySelectorAll(".post-link");
	postLinks.forEach((postLink) => {
		postLink.addEventListener(
			"mouseover",
			() => {
				postIcons.forEach((postIcon) => {
					if (postIcon.id === postLink.dataset.id) {
						postIcon.urls
							.sort(() => Math.random() - 0.5)
							.forEach((url) => {
								const delay = Math.random() * 2001;
								const x = Math.random() * postLink.clientWidth + 1 + "px";
								setTimeout(() => {
									const icon = document.createElement("img");
									icon.src = url;
									icon.classList.add("flow-post-icon");
									icon.style.left = x;
									postLink.appendChild(icon);
									setTimeout(() => {
										icon.remove();
									}, 3001);
								}, delay);
							});
					}
				});
			},
			false
		);
	});
</script>
