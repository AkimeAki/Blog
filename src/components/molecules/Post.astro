---
import type { Blog } from "@/lib/microcms";
import type { MicroCMSListContent } from "microcms-js-sdk";
import { formatDate } from "@/lib/format-date";
import { formatContents } from "@/lib/format-contents";
import { css } from "@/styled-system/css";

interface Props {
	post: Blog & MicroCMSListContent;
}

const { post } = Astro.props;

const categoryContents = await formatContents(
	post.category !== undefined && post.category.contents !== undefined ? post.category.contents : ""
);
const contents = categoryContents + (await formatContents(post.contents));

const formattedPublishedAt = formatDate(post.publishedAt ?? post.createdAt);
---

<div
	class={css`
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 30px;
		margin-bottom: 30px;
	`}
>
	<h2
		class={css`
			font-size: 30px;
			font-weight: bold;
			text-align: center;
			width: 100%;
			max-width: 1000px;
			padding: 50px 0;
			word-wrap: break-word;
			overflow-wrap: anywhere;
			word-break: break-word;
			word-break: auto-phrase;

			@media (max-width: 800px) {
				font-size: 25px;
			}
		`}
	>
		{post.title}
	</h2>
	{
		post.thumbnail !== undefined && (
			<img
				class={css`
					width: 100%;
					max-width: 800px;
					height: auto;
				`}
				src={`${post.thumbnail.url}?fm=webp&w=880`}
				srcset={`${post.thumbnail.url}?fm=webp&w=300px 300w,${post.thumbnail.url}?fm=webp&w=500px 500w,${post.thumbnail.url}?fm=webp&w=650px 650w,${post.thumbnail.url}?fm=webp&w=880px 880w`}
				sizes="(max-width: 350px) 300px,(max-width: 550px) 500px,(max-width: 700px) 650px,875px"
				alt={post.title}
				width={post.thumbnail.width}
				height={post.thumbnail.height}
			/>
		)
	}
</div>

<div
	class={css`
		width: 100%;
		max-width: 800px;
		margin: 0 auto 60px auto;
	`}
>
	{
		post.tags.length !== 0 && (
			<div
				class={css`
					display: flex;
					gap: 10px;
					flex-wrap: wrap;
					align-items: center;
					padding: 10px 0 30px;
				`}
			>
				{post.tags.map((tag) => {
					const size = 30;

					return (
						<div
							class={css`
								display: flex;
								gap: 5px;
								flex-wrap: wrap;
								align-items: center;
							`}
						>
							<img
								class={css`
									border-radius: 9999px;
									width: 20px;
									height: auto;
									background-color: #dfdfdf;
								`}
								src={tag.image !== undefined ? `${tag.image.url}?fm=webp&w=${size}` : ""}
								width={size}
								height={size}
								alt={tag.name}
							/>
							<span
								class={css`
									font-size: 13px;
								`}
							>
								{tag.name}
							</span>
						</div>
					);
				})}
			</div>
		)
	}
	<time
		class={css`
			font-size: 15px;
			text-align: right;
			display: block;
		`}
		datetime={post.publishedAt ?? post.createdAt}
	>
		{`${formattedPublishedAt.year}/${formattedPublishedAt.month}/${formattedPublishedAt.date}`}
	</time>
</div>
<article class={"cms-contents"}>
	<div class="rich-contents" set:html={contents} />
</article>

<style lang="scss" is:global>
	.cms-contents {
		width: 100%;
		max-width: 800px;
		margin: 0 auto;

		.rich-contents {
			display: flex;
			flex-direction: column;
			gap: 30px;

			a {
				color: #07a715;
				font-weight: bold;

				&:after {
					mask-image: url("/open-new-tab.png");
					mask-size: contain;
					mask-repeat: no-repeat;
					aspect-ratio: 1 / 1;
					content: "";
					width: 1em;
					display: inline-block;
					background-color: currentColor;
					transform: translateX(0.5px) translateY(2.5px);
				}

				&:hover {
					text-decoration: underline;
				}

				@media (prefers-color-scheme: dark) {
					color: #9deb83;
				}
			}

			img {
				max-width: calc(100% - 100px);
				height: auto;
				margin: 0 auto;
				display: block;
				cursor: zoom-in;
				user-select: none;
				box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
				border-radius: 7px;

				&.zoom {
					position: fixed;
					top: 0;
					left: 0;
					border-radius: 0;
					max-width: 100%;
					width: 100%;
					height: 100%;
					background-color: rgba(0, 0, 0, 0.8);
					object-fit: contain;
					z-index: 9999;
					cursor: zoom-out;
				}
			}

			h5 {
				margin-top: 40px;

				&:before {
					content: "### ";
					color: #9b9b9b;
				}
			}
			h5,
			h5 > * {
				font-size: 17px;
				font-weight: bold;
				line-height: 1.4;
			}

			h4 {
				margin-top: 40px;

				& + h5 {
					margin-top: 0;
				}

				&:before {
					content: "## ";
					color: #9b9b9b;
				}
			}

			h4,
			h4 > * {
				font-size: 20px;
				font-weight: bold;
				line-height: 1.4;
			}

			h3 {
				margin-top: 40px;
				padding: 10px 0;

				& + h4 {
					margin-top: 0;
				}

				&:before {
					content: "# ";
					color: #9b9b9b;
				}
			}

			h3,
			h3 > * {
				font-size: 25px;
				font-weight: bold;
				line-height: 1.4;
			}

			pre > code,
			pre > code * {
				tab-size: 4;
				-moz-tab-size: 4;
				font-size: 13px;
			}

			pre:has(code) {
				padding: 5px 10px 10px;
				border-radius: 7px;
				overflow-x: auto;
			}

			div[data-filename] > pre:has(code) {
				border-top-left-radius: 0;
			}

			div[data-filename] {
				position: relative;
				padding-top: 22px;

				&:after {
					position: absolute;
					content: attr(data-filename);
					top: 0;
					left: 0;
					background-color: white;
					border-top-right-radius: 7px;
					border-top-left-radius: 7px;
					padding: 3px 15px;
					font-size: 14px;
					border-top: 2px solid #2e2e2e;
					border-left: 2px solid #2e2e2e;
					border-right: 2px solid #2e2e2e;
					font-weight: 700;

					@media (prefers-color-scheme: dark) {
						background-color: #242424;
						border-top: 2px solid #242424;
						border-left: 2px solid #242424;
						border-right: 2px solid #242424;
					}
				}
			}

			p {
				line-height: 1.6;
			}

			s,
			s > * {
				text-decoration: line-through;
			}

			strong,
			strong > * {
				font-weight: bold;
			}

			p > code {
				background-color: #242424;
				color: white;
				padding: 2px 10px;
				border-radius: 6px;
				font-size: 13px;
				margin: 0 5px;
				vertical-align: middle;
			}

			.iframely-embed {
				display: flex;
				justify-content: center;

				& > div {
					max-width: 500px;
				}
			}

			.iframely-embed > div {
				max-width: 500px;
			}

			.iframely-responsive {
				position: relative;
				top: 0;
				left: 0;
				width: 100%;
				height: 0;
				padding-bottom: 56.25%;
			}

			.iframely-responsive > * {
				position: absolute;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				border: 0;
			}

			figure > figcaption {
				text-align: center;
				font-size: 15px;
				margin-top: 10px;
			}

			.note {
				font-size: 12px;
				font-weight: bold;
				transform: translateY(-0.5em);
				display: inline-block;
				color: #f0425a;
				cursor: pointer;
			}

			.note_address {
				font-size: 12px;
				font-weight: bold;
				transform: translateY(-0.5em);
				display: inline-block;
				color: #f0425a;
				scroll-margin: 20px;
			}
		}
	}
</style>

<script>
	const observer = new IntersectionObserver((entries) => {
		for (const entry of entries) {
			if (entry.isIntersecting) {
				document.head.insertAdjacentHTML(
					"beforeend",
					/* html */ `
						<link rel="preconnect" href="https://fonts.googleapis.com">
						<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
						<link href="https://fonts.googleapis.com/css2?family=Source+Code+Pro&display=swap" rel="stylesheet">
						<style>
							pre > code,
							pre > code * {
								font-family: "Source Code Pro", monospace;
							}
						</style>
					`
				);
				observer.disconnect();
			}
		}
	});

	const code = document.querySelector("pre > code");
	if (code !== null) {
		observer.observe(code);
	}
</script>

<script>
	const observer = new IntersectionObserver((entries) => {
		for (const entry of entries) {
			if (entry.isIntersecting) {
				const script = document.createElement("script");
				script.src = "//cdn.iframe.ly/embed.js";
				document.body.appendChild(script);

				observer.disconnect();
			}
		}
	});

	const iframely = document.querySelector(".iframely-embed");
	if (iframely !== null) {
		observer.observe(iframely);
	}
</script>

<script>
	function noScroll(e: WheelEvent | TouchEvent) {
		e.preventDefault();
	}

	const imgs = document.querySelectorAll(".rich-contents img");
	for (const imgElement of imgs) {
		imgElement.addEventListener("click", () => {
			if (imgElement.classList.contains("zoom")) {
				imgElement.classList.remove("zoom");
				document.removeEventListener("touchmove", noScroll);
				document.removeEventListener("wheel", noScroll);
			} else {
				imgElement.classList.add("zoom");
				document.addEventListener("touchmove", noScroll, { passive: false });
				document.addEventListener("wheel", noScroll, { passive: false });
				console.log("aaa");
			}
		});
	}
</script>

<script>
	const noteList = document.querySelectorAll<HTMLSpanElement>(".rich-contents .note");
	const noteAddressList = document.querySelectorAll<HTMLSpanElement>(".rich-contents .note_address");
	for (const noteElement of noteList) {
		noteElement.addEventListener("click", () => {
			const noteContent = noteElement.textContent;
			for (const noteAddressElement of noteAddressList) {
				if (noteAddressElement.textContent === noteContent) {
					noteAddressElement.scrollIntoView({ behavior: "smooth" });
				}
			}
		});
	}
</script>
